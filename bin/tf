#!/bin/bash

set -eo pipefail

action=$1

if [ ! -z "$TERRAFORM_AWS_ACCESS_KEY_ID" ] && [ ! -z "$TERRAFORM_AWS_SECRET_ACCESS_KEY" ]; then
  export AWS_ACCESS_KEY_ID=$TERRAFORM_AWS_ACCESS_KEY_ID
  export AWS_SECRET_ACCESS_KEY=$TERRAFORM_AWS_SECRET_ACCESS_KEY
fi

if [ -z "$AWS_REGION" ]; then
  if [ -z "$AWS_DEFAULT_REGION" ]; then
    echo "ERROR   'AWS_REGION' or 'AWS_DEFAULT_REGION' must be set!"
    exit 1
  else
    export AWS_REGION=$AWS_DEFAULT_REGION
  fi
fi

options=""
TF_VAR_environment="default"
stateBucket=""

if [ "${action}" == "apply" ]; then
  options="-auto-approve"
fi

if [ "${TERRAFORM_DESTROY}" == "true" ]; then
  options="${options} -destroy"
fi

for arg in "$@"; do
  case $arg in
  --env=*)
    export TF_VAR_environment=${arg#--env=}
    ;;
  --state-bucket=*)
    stateBucket=${arg#--state-bucket=}

    if [ ! -z "$AWS_ACCOUNT_ID" ]; then
      stateBucket="${stateBucket}-${AWS_ACCOUNT_ID}"
    fi

    export TF_VAR_state_bucket=$stateBucket
    ;;
  --eks)
    aws eks update-kubeconfig --name $TF_VAR_environment
    ;;
  --eks-cluster=*)
    aws eks update-kubeconfig --name ${arg#--eks-cluster=}
    ;;
  esac
done

if [ ! "${stateBucket}" == "" ]; then
  sed -i "s/STATE_BUCKET/${stateBucket}/" backend.tf
fi

if [ "${TF_VAR_environment}" == "default" ]; then
  sed -i "s/STATE_FILE_LOCATION/terraform\/${AWS_REGION}/" backend.tf
else
  sed -i "s/STATE_FILE_LOCATION/terraform\/${TF_VAR_environment}\/${AWS_REGION}/" backend.tf
fi

echo '--- :terraform: Init'
terraform init

echo "+++ :terraform: ${action^}"
terraform $action $options